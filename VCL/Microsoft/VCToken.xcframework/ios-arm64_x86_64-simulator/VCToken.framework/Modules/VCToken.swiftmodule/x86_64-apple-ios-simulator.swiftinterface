// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VCToken
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import VCCrypto
@_exported import VCToken
import _Concurrency
import _StringProcessing
public struct JweToken {
  public let headers: Header
  public let aad: Foundation.Data
  public let encryptedKey: Foundation.Data
  public let iv: Foundation.Data
  public let ciperText: Foundation.Data
  public let authenticationTag: Foundation.Data
}
public protocol Claims : Swift.Decodable, Swift.Encodable {
  var iat: Swift.Double? { get }
  var exp: Swift.Double? { get }
  var nbf: Swift.Double? { get }
}
extension Claims {
  public var iat: Swift.Double? {
    get
  }
  public var exp: Swift.Double? {
    get
  }
  public var nbf: Swift.Double? {
    get
  }
}
public struct ECPublicJwk : Swift.Codable, Swift.Equatable {
  public let keyType: Swift.String
  public let keyId: Swift.String?
  public let use: Swift.String?
  public let keyOperations: [Swift.String]?
  public let algorithm: Swift.String?
  public let curve: Swift.String
  public let x: Swift.String
  public let y: Swift.String?
  public init(x: Swift.String, y: Swift.String, keyId: Swift.String)
  public init(withPublicKey key: VCCrypto.Secp256k1PublicKey, withKeyId kid: Swift.String)
  public func toJWK() -> JWK
  public func getThumbprint() throws -> Swift.String
  public static func == (a: ECPublicJwk, b: ECPublicJwk) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TokenVerifier : TokenVerifying {
  public init(cryptoOperations: any VCCrypto.CryptoOperating = CryptoOperations())
  public func verify<T>(token: JwsToken<T>, usingPublicKey key: JWK) throws -> Swift.Bool where T : Claims
}
public enum JwsTokenError : Swift.Error {
  case unsupportedAlgorithm(name: Swift.String?)
}
public struct JwsToken<T> where T : Claims {
  public let headers: Header
  public let content: T
  public let protectedMessage: Swift.String
  public var rawValue: Swift.String?
  public init?(headers: Header, content: T, protectedMessage: Swift.String? = nil, signature: Foundation.Data? = nil, rawValue: Swift.String? = nil)
  public init?(from encodedToken: Swift.String)
  public init?(from encodedToken: Foundation.Data)
  public func serialize() throws -> Swift.String
  public mutating func sign(using signer: any TokenSigning, withSecret secret: any VCCrypto.VCCryptoSecret) throws
  public func verify(using verifier: any TokenVerifying, withPublicKey key: JWK) throws -> Swift.Bool
  public func verify(using verifier: any TokenVerifying, withPublicKey key: ECPublicJwk) throws -> Swift.Bool
}
public typealias Signature = Foundation.Data
public struct JWK : Swift.Codable, Swift.Equatable {
  public let keyType: Swift.String
  public let keyId: Swift.String?
  public let key: Foundation.Data?
  public let curve: Swift.String?
  public let use: Swift.String?
  public let x: Foundation.Data?
  public let y: Foundation.Data?
  public let d: Foundation.Data?
  public init(keyType: Swift.String, keyId: Swift.String? = nil, key: Foundation.Data? = nil, curve: Swift.String? = nil, use: Swift.String? = nil, x: Foundation.Data? = nil, y: Foundation.Data? = nil, d: Foundation.Data? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: JWK, b: JWK) -> Swift.Bool
}
public struct Header : Swift.Codable {
  public let type: Swift.String?
  public let algorithm: Swift.String?
  public let encryptionMethod: Swift.String?
  public let jsonWebKey: Swift.String?
  public let keyId: Swift.String?
  public let contentType: Swift.String?
  public let pbes2SaltInput: Swift.String?
  public let pbes2Count: Swift.UInt?
  public init(type: Swift.String? = nil, algorithm: Swift.String? = nil, encryptionMethod: Swift.String? = nil, jsonWebKey: Swift.String? = nil, keyId: Swift.String? = nil, contentType: Swift.String? = nil, pbes2SaltInput: Swift.String? = nil, pbes2Count: Swift.UInt? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case algorithm
    case jsonWebKey
    case keyId
    case contentType
    case encryptionMethod
    case pbes2SaltInput
    case pbes2Count
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum JweFormat {
  case compact
  public static func == (a: JweFormat, b: JweFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class JweEncoder {
  public init()
  public func encode(_ token: JweToken, format: JweFormat = JweFormat.compact) throws -> Swift.String
  @objc deinit
}
public enum VCTokenError : Swift.Error, Swift.Equatable {
  case unableToParseData
  case unableToParseString
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: VCTokenError, b: VCTokenError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TokenVerifying {
  func verify<T>(token: JwsToken<T>, usingPublicKey key: JWK) throws -> Swift.Bool where T : Claims
}
public class JwsDecoder {
  public init()
  public func decode<T>(_ type: T.Type, token: Swift.String) throws -> JwsToken<T> where T : Claims
  @objc deinit
}
public struct KeyId : VCCrypto.VCCryptoSecret {
  public let id: Foundation.UUID
  public let accessGroup: Swift.String?
  public init(id: Foundation.UUID)
  public func isValidKey() throws
  public func migrateKey(fromAccessGroup oldAccessGroup: Swift.String?) throws
  public func withUnsafeBytes(_ body: (Swift.UnsafeRawBufferPointer) throws -> Swift.Void) throws
}
public enum JwsFormat {
  case compact
  public static func == (a: JwsFormat, b: JwsFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class JwsEncoder {
  public init()
  public func encode<T>(_ token: JwsToken<T>, format: JwsFormat = JwsFormat.compact) throws -> Swift.String where T : Claims
  @objc deinit
}
public class JweDecoder {
  public init()
  public func decode(token: Swift.String) throws -> JweToken
  @objc deinit
}
public struct Secp256k1Signer : TokenSigning {
  public init(cryptoOperations: any VCCrypto.CryptoOperating = CryptoOperations())
  public func sign<T>(token: JwsToken<T>, withSecret secret: any VCCrypto.VCCryptoSecret) throws -> Signature where T : Claims
  public func getPublicJwk(from secret: any VCCrypto.VCCryptoSecret, withKeyId keyId: Swift.String) throws -> ECPublicJwk
}
public struct PbesJwe {
  public init()
  public func encrypt(_ plainText: Foundation.Data, with password: Swift.String, using headers: Header) throws -> JweToken
  public func decrypt(_ token: JweToken, with password: Swift.String) throws -> Foundation.Data
}
public protocol TokenSigning {
  func sign<T>(token: JwsToken<T>, withSecret secret: any VCCrypto.VCCryptoSecret) throws -> Signature where T : Claims
  func getPublicJwk(from secret: any VCCrypto.VCCryptoSecret, withKeyId keyId: Swift.String) throws -> ECPublicJwk
}
extension Header.CodingKeys : Swift.Equatable {}
extension Header.CodingKeys : Swift.Hashable {}
extension Header.CodingKeys : Swift.RawRepresentable {}
extension JweFormat : Swift.Equatable {}
extension JweFormat : Swift.Hashable {}
extension VCTokenError : Swift.Hashable {}
extension JwsFormat : Swift.Equatable {}
extension JwsFormat : Swift.Hashable {}
