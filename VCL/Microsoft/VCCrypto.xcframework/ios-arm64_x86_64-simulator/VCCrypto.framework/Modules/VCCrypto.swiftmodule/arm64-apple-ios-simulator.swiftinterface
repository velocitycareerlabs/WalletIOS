// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VCCrypto
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CryptoKit
import Foundation
import Secp256k1
import Swift
@_exported import VCCrypto
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Sha512 : Hashing {
  public init()
  public func hash(data: Foundation.Data) -> Foundation.Data
}
public enum SecretStoringError : Swift.Error {
  case itemNotFound
  case invalidItemInStore
  case itemAlreadyInStore
  case invalidType
  case deleteFromStoreError(status: Darwin.OSStatus, message: Swift.String? = nil)
  case saveToStoreError(status: Swift.Int32, message: Swift.String? = nil)
  case readFromStoreError(status: Darwin.OSStatus, message: Swift.String? = nil)
}
public protocol SecretStoring {
  func getSecret(id: Foundation.UUID, itemTypeCode: Swift.String, accessGroup: Swift.String?) throws -> Foundation.Data
  func saveSecret(id: Foundation.UUID, itemTypeCode: Swift.String, accessGroup: Swift.String?, value: inout Foundation.Data) throws
  func deleteSecret(id: Foundation.UUID, itemTypeCode: Swift.String, accessGroup: Swift.String?) throws
}
public protocol KeyManagementOperating {
  func generateKey() throws -> any VCCryptoSecret
  func retrieveKeyFromStorage(withId id: Foundation.UUID) -> any VCCryptoSecret
  func save(key: Foundation.Data, withId id: Foundation.UUID) throws
  func deleteKey(withId id: Foundation.UUID) throws
  func getKey(withId id: Foundation.UUID) throws -> Foundation.Data
}
public enum SupportedHashAlgorithm {
  case SHA256
  case SHA512
  public static func == (a: SupportedHashAlgorithm, b: SupportedHashAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PublicKey {
  var algorithm: Swift.String { get }
  var uncompressedValue: Foundation.Data { get }
}
public struct KeyManagementOperations : KeyManagementOperating {
  public init(sdkConfiguration: any VCSDKConfigurable)
  public init(secretStore: any SecretStoring, sdkConfiguration: any VCSDKConfigurable)
  public func generateKey() throws -> any VCCryptoSecret
  public func retrieveKeyFromStorage(withId id: Foundation.UUID) -> any VCCryptoSecret
  public func save(key: Foundation.Data, withId id: Foundation.UUID) throws
  public func deleteKey(withId id: Foundation.UUID) throws
  public func getKey(withId id: Foundation.UUID) throws -> Foundation.Data
}
extension Foundation.Data {
  public init?(base64URLEncoded base64URLString: Swift.String)
  public func base64URLEncodedString() -> Swift.String
}
public enum CryptoOperationsError : Swift.Error {
  case invalidPublicKey
  case signingAlgorithmNotSupported
  case signingAlgorithmDoesNotSupportGetPublicKey
  case signingAlgorithmDoesNotSupportSigning
  case signingAlgorithmDoesNotSupportVerification
  public static func == (a: CryptoOperationsError, b: CryptoOperationsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CryptoOperations : CryptoOperating {
  public init(signingAlgorithms: [Swift.String : SigningAlgorithm] = [:])
  public func sign(message: Foundation.Data, usingSecret secret: any VCCryptoSecret, algorithm: Swift.String = SupportedCurve.Secp256k1.rawValue) throws -> Foundation.Data
  public func getPublicKey(fromSecret secret: any VCCryptoSecret, algorithm: Swift.String = SupportedCurve.Secp256k1.rawValue) throws -> any PublicKey
  public func verify(signature: Foundation.Data, forMessage message: Foundation.Data, usingPublicKey publicKey: any PublicKey) throws -> Swift.Bool
}
public protocol CryptoOperating {
  func sign(message: Foundation.Data, usingSecret secret: any VCCryptoSecret, algorithm: Swift.String) throws -> Foundation.Data
  func getPublicKey(fromSecret secret: any VCCryptoSecret, algorithm: Swift.String) throws -> any PublicKey
  func verify(signature: Foundation.Data, forMessage message: Foundation.Data, usingPublicKey publicKey: any PublicKey) throws -> Swift.Bool
}
extension Foundation.Data {
  public init(hexString: Swift.String)
  public func toHexString() -> Swift.String
}
public struct Pbkdf {
  public init()
  public func derive(from password: Swift.String, withSaltInput p2s: Foundation.Data, forAlgorithm algorithm: Swift.String, rounds: Swift.UInt32) throws -> any VCCryptoSecret
}
@available(*, deprecated, message: "Superceded by HmacSha2")
public struct HmacSha512 {
  public init()
  public func authenticate(message: Foundation.Data, withSecret secret: any VCCryptoSecret) throws -> Foundation.Data
  public func isValidAuthenticationCode(_ mac: Foundation.Data, authenticating message: Foundation.Data, withSecret secret: any VCCryptoSecret) throws -> Swift.Bool
}
public struct HmacSha2 {
  public init(algorithm: Swift.UInt32) throws
  public func authenticate(message: Foundation.Data, with secret: any VCCryptoSecret) throws -> Foundation.Data
  public func validate(_ mac: Foundation.Data, authenticating message: Foundation.Data, with secret: any VCCryptoSecret) throws -> Swift.Bool
}
public protocol VCSDKConfigurable {
  var accessGroupIdentifier: Swift.String? { get }
}
public struct Sha256 : Hashing {
  public init()
  public func hash(data: Foundation.Data) -> Foundation.Data
}
public struct SigningAlgorithm {
}
public enum SupportedSigningOperations {
  case Signing
  case Verification
  case GetPublicKey
  public static func == (a: SupportedSigningOperations, b: SupportedSigningOperations) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol VCCryptoSecret {
  var id: Foundation.UUID { get }
  var accessGroup: Swift.String? { get }
  func isValidKey() throws
  func migrateKey(fromAccessGroup currentAccessGroup: Swift.String?) throws
}
public enum SupportedCurve : Swift.String {
  case ED25519
  case Secp256k1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Hashing {
  func hash(data: Foundation.Data) -> Foundation.Data
}
public struct Secp256k1 : Signing {
  public init()
  public func sign(message: Foundation.Data, withSecret secret: any VCCryptoSecret) throws -> Foundation.Data
  public func isValidSignature(signature: Foundation.Data, forMessage message: Foundation.Data, usingPublicKey publicKey: any PublicKey) throws -> Swift.Bool
  public func createPublicKey(forSecret secret: any VCCryptoSecret) throws -> any PublicKey
  public func createKeyPair(forSecret secret: any VCCryptoSecret) throws -> (EphemeralSecret, Secp256k1PublicKey)
  public func createPublicKey(forPrivateKey privateKey: EphemeralSecret) throws -> Secp256k1PublicKey
}
public struct Aes {
  public init()
  public func wrap(key: any VCCryptoSecret, with kek: any VCCryptoSecret) throws -> Foundation.Data
  public func unwrap(wrapped: Foundation.Data, using kek: any VCCryptoSecret) throws -> any VCCryptoSecret
  public func encrypt(data: Foundation.Data, with key: any VCCryptoSecret, iv: Foundation.Data) throws -> Foundation.Data
  public func decrypt(data: Foundation.Data, with key: any VCCryptoSecret, iv: Foundation.Data) throws -> Foundation.Data
}
public class Secp256k1PublicKey : PublicKey {
  final public let x: Foundation.Data
  final public let y: Foundation.Data
  final public let algorithm: Swift.String
  public var uncompressedValue: Foundation.Data {
    get
  }
  public init?(uncompressedPublicKey: Foundation.Data)
  public init?(x: Foundation.Data, y: Foundation.Data)
  @objc deinit
}
public protocol Signing {
  func sign(message: Foundation.Data, withSecret secret: any VCCryptoSecret) throws -> Foundation.Data
  func isValidSignature(signature: Foundation.Data, forMessage message: Foundation.Data, usingPublicKey publicKey: any PublicKey) throws -> Swift.Bool
  func createPublicKey(forSecret secret: any VCCryptoSecret) throws -> any PublicKey
}
public struct HmacSha2AesCbc {
  public init(methodName: Swift.String) throws
  public func encrypt(plainText: Foundation.Data, using aad: Foundation.Data, iv: Foundation.Data, with keys: (mac: EphemeralSecret, enc: EphemeralSecret)) throws -> (Foundation.Data, Foundation.Data)
  public func decrypt(_ input: (cipherText: Foundation.Data, mac: Foundation.Data), using aad: Foundation.Data, iv: Foundation.Data, with keys: (mac: EphemeralSecret, enc: EphemeralSecret)) throws -> Foundation.Data
  public static func props(for methodName: Swift.String) throws -> (Swift.Int, Swift.Int)
}
public class ED25519PublicKey : PublicKey {
  final public let algorithm: Swift.String
  final public let uncompressedValue: Foundation.Data
  public init?(x: Foundation.Data)
  @objc deinit
}
final public class EphemeralSecret {
  final public var accessGroup: Swift.String?
  final public var id: Foundation.UUID {
    get
  }
  final public var value: Foundation.Data {
    get
  }
  public init(with data: Foundation.Data, id: Foundation.UUID? = nil, accessGroup: Swift.String? = nil)
  public init(size: Swift.Int = 32) throws
  public init(with secret: any VCCryptoSecret) throws
  final public func withUnsafeBytes(_ body: (Swift.UnsafeRawBufferPointer) throws -> Swift.Void) throws
  final public func isValidKey() throws
  final public func migrateKey(fromAccessGroup currentAccessGroup: Swift.String?) throws
  final public func prefix(_ maxLength: Swift.Int) -> EphemeralSecret
  final public func suffix(_ maxLength: Swift.Int) -> EphemeralSecret
  @objc deinit
}
extension SupportedHashAlgorithm : Swift.Equatable {}
extension SupportedHashAlgorithm : Swift.Hashable {}
extension CryptoOperationsError : Swift.Equatable {}
extension CryptoOperationsError : Swift.Hashable {}
extension SupportedSigningOperations : Swift.Equatable {}
extension SupportedSigningOperations : Swift.Hashable {}
extension SupportedCurve : Swift.Equatable {}
extension SupportedCurve : Swift.Hashable {}
extension SupportedCurve : Swift.RawRepresentable {}
extension EphemeralSecret : VCCryptoSecret {}
